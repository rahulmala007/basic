1)BOOTH MULTIPLIER

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    10:23:22 04/10/2020 
// Design Name: 
// Module Name:    booth_multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module booth_multiplier(
	input signed [3:0] X, 
	input signed [3:0] Y,
   output signed [7:0] Z
    );
	 reg signed [7:0] Z;
    reg [1:0] temp;
    integer i;
    reg E1;
    reg [3:0] Y1;
	 
	 always @ (X, Y)
    begin
    Z = 8'd0;
    E1 = 1'd0;
    for (i = 0; i < 4; i = i + 1)
    begin
    temp = {X[i], E1};
    Y1 = - Y;
	 case (temp)
    2'd2 : Z [7 : 4] = Z [7 : 4] + Y1;
    2'd1 : Z [7 : 4] = Z [7 : 4] + Y;
	 default : begin end
    endcase
    Z = Z >> 1;
    Z[7] = Z[6];
    E1 = X[i];
    end
	 if (Y == 4'd8)
    begin
    Z = - Z;
    end
    end

endmodule

testbench-
`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:
//
// Create Date:   10:27:41 04/10/2020
// Design Name:   booth_multiplier
// Module Name:   D:/verilog/postmidsem/booth_test.v
// Project Name:  postmidsem
// Target Device:  
// Tool versions:  
// Description: 
//
// Verilog Test Fixture created by ISE for module: booth_multiplier
//
// Dependencies:
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
////////////////////////////////////////////////////////////////////////////////

module booth_test;

	// Inputs
	reg [3:0] X;
	reg [3:0] Y;

	// Outputs
	wire [7:0] Z;

	// Instantiate the Unit Under Test (UUT)
	booth_multiplier uut (
		.X(X), 
		.Y(Y), 
		.Z(Z)
	);

	initial begin
		// Initialize Inputs
		X = 0;
		Y = 0;

		// Wait 100 ns for global reset to finish
		#100;
		X=5;
		Y=7;
		
		#100;
		X=5;
		Y=5;
		
		#100;
		X=3;
		Y=2;
		
		#100;
		X=6;
		Y=3;
        
		// Add stimulus here

	end
	initial begin
	$monitor("time=%d,x=%d,y=%d,z=%d",$time,X,Y,Z);
	end
      
endmodule



2)Parity mealey
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    09:57:03 04/10/2020 
// Design Name: 
// Module Name:    parity_mealey 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module parity_mealey(
	input clk,
	input reset,
	input inp,
	output reg outp
    );
	 
	 reg state;
	 reg nextstate;
	 
	 always@(posedge clk or posedge reset) //state change logic
	 begin
	 if(reset)state<=1'b0;
	 else state<=nextstate;
	 end
	 
	 always@(state or inp) //transition and output logic 
	 begin
		nextstate<=1'b0;
		outp<=1'b0;
		case(state)
			1'b0: if(inp)
					begin
					outp<=1'b1;
					nextstate<=1'b1;
					end
				
			1'b1: if(!inp)
					begin
					outp<=1'b0;
					nextstate<=1'b1;
					end
		endcase
		
	 end


endmodule

testbench-
`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:
//
// Create Date:   10:33:29 04/10/2020
// Design Name:   parity_mealey
// Module Name:   D:/verilog/postmidsem/parity_mealey_test.v
// Project Name:  postmidsem
// Target Device:  
// Tool versions:  
// Description: 
//
// Verilog Test Fixture created by ISE for module: parity_mealey
//
// Dependencies:
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
////////////////////////////////////////////////////////////////////////////////

module parity_mealey_test;

	// Inputs
	reg clk;
	reg reset;
	reg inp;

	// Outputs
	wire outp;

	// Instantiate the Unit Under Test (UUT)
	parity_mealey uut (
		.clk(clk), 
		.reset(reset), 
		.inp(inp), 
		.outp(outp)
	);
	initial begin
	clk=0;
	forever begin
	#10 clk=~clk;
	end
	end
	
	initial begin
		// Initialize Inputs
		reset = 1'b0;
		inp = 1'b1;

		// Wait 100 ns for global reset to finish
		#10;
      reset = 1'b0;
		inp = 1'b0;
		
		#10
		reset = 1'b0;
		inp = 1'b1;
		
		#10
		reset = 1'b0;
		inp = 1'b1;
		
		#10
		reset = 1'b0;
		inp = 1'b1;


		// Add stimulus here

	end
	
	initial begin
	$monitor("time=%d,clock=%b,inp=%b,outp=%b",$time,clk,inp,outp);
	end

      
endmodule

3)parity moore

testbench-


`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:
//
// Create Date:   10:42:33 04/10/2020
// Design Name:   parity
// Module Name:   D:/verilog/postmidsem/parity_test.v
// Project Name:  postmidsem
// Target Device:  
// Tool versions:  
// Description: 
//
// Verilog Test Fixture created by ISE for module: parity
//
// Dependencies:
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
////////////////////////////////////////////////////////////////////////////////

module parity_test;

	// Inputs
	reg clk;
	reg reset;
	reg inp;

	// Outputs
	wire outp;

	// Instantiate the Unit Under Test (UUT)
	parity uut (
		.clk(clk), 
		.reset(reset), 
		.inp(inp), 
		.outp(outp)
	);
	initial begin
	clk=0;
	forever begin
	#10 clk=~clk;
	end
	end
	
	initial begin
		// Initialize Inputs
		reset = 1'b0;
		inp = 1'b0;

		// Wait 100 ns for global reset to finish
		#20;
		reset = 1'b0;
		inp = 1'b1;
        
		  
		  #20;
		reset = 1'b0;
		inp = 1'b1;
		
		#20;
		reset = 1'b0;
		inp = 1'b0;
		
		#20;
		reset = 1'b0;
		inp = 1'b1;
		
		#20;
		reset = 1'b0;
		inp = 1'b0;
		// Add stimulus here

	end
	
	initial begin
	$monitor("time=%d,inp=%b,outp=%b",$time,inp,outp);
	end
      
endmodule



code--

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    09:25:39 04/10/2020 
// Design Name: 
// Module Name:    parity 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module parity(
	input clk,
	input reset,
	input inp,
	output reg outp
    );
	 reg state;
	 reg nextstate;
	 
	 always @(posedge clk or posedge reset) //state on clk and reset
	 begin
	 if(reset)state<=1'b0;
	 else state<=nextstate;
	 end
	 
	 always@(state) //output logic
	 begin
	 if(!state)outp<=1'b0;
	 else outp<=1'b1;
	 end
	
	 
	 always@(state or inp) // transition logic
	 begin
		nextstate<=1'b0;
		case(state)
			1'b0: if(inp) nextstate<=1'b1;
			1'b1: if(!inp)nextstate<=1'b1;
		endcase
	 end
	 
endmodule

4)seq_detector 1011 mealey
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    10:17:55 04/10/2020 
// Design Name: 
// Module Name:    seq_detec_mealey 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module seq_detec_mealey(
	input clk,
	input reset,
	input inp,
	output reg outp
    );
	 
	 reg [1:0] state;
	 reg [1:0]nextstate;
	 
	 always@(posedge clk or posedge reset) //state logic
	 begin
	 if(reset)state<=2'b00;
	 else state<=nextstate;
	 end
	 
	  always@(state or inp) //transition logic
	 begin
		outp<=1'b0;
		case(state)
			2'b00:
				if(inp)nextstate<=2'b01;
				else nextstate<=2'b00;
			2'b01:
				if(inp)nextstate<=2'b01;
				else nextstate<=2'b10;
			2'b10:
				if(inp)nextstate<=2'b11;
				else nextstate<=2'b00;
			2'b11:
				if(inp)
				begin
				nextstate<=2'b01;
				outp<=1'b1;
				end
				else nextstate<=2'b11;
			endcase
	 end


endmodule

testbench-
`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:
//
// Create Date:   11:03:03 04/10/2020
// Design Name:   seq_detec_mealey
// Module Name:   D:/verilog/postmidsem/seq_dec_mealey_test.v
// Project Name:  postmidsem
// Target Device:  
// Tool versions:  
// Description: 
//
// Verilog Test Fixture created by ISE for module: seq_detec_mealey
//
// Dependencies:
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
////////////////////////////////////////////////////////////////////////////////

module seq_dec_mealey_test;

	// Inputs
	reg clk;
	reg reset;
	reg inp;

	// Outputs
	wire outp;

	// Instantiate the Unit Under Test (UUT)
	seq_detec_mealey uut (
		.clk(clk), 
		.reset(reset), 
		.inp(inp), 
		.outp(outp)
	);
	initial begin
	clk=0;
	forever 
	begin
	#5 clk=~clk;
	end
	end
	initial begin
		// Initialize Inputs
		reset = 1'b1;
		inp = 1'b0;

		// Wait 100 ns for global reset to finish
		#30;
		reset = 1'b0;
		
		#40;
		inp = 1'b0;
		#10;
		inp = 1'b1;
		#20;
		inp = 1'b1;
		#20;
		inp = 1'b0;
		#20;
		inp = 1'b1;
		
		
		
        
        
		// Add stimulus here

	end
	initial begin
	$monitor("time=%d,clock=%b,inp=%b,outp=%b",$time,clk,inp,outp);
	end
      
endmodule


5)seq_detect 1011 moore
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    10:09:05 04/10/2020 
// Design Name: 
// Module Name:    sequence_detector 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module sequence_detector(
	input clk,
	input reset,
	input inp,
	output outp
    );
	 
	 reg [2:0]state;
	 reg [2:0]nextstate;
	 
	 always@(posedge clk or posedge reset) //state logic
	 begin
	 if(reset)state<=3'b0;
	 else state<=nextstate;
	 end
	 
	 always@(state or inp) //transition logic
	 begin
		case(state)
			3'b0:
				if(inp)nexstate<=3'b1;
				else nexstate<=3'b0;
			3'b1:
				if(inp)nexstate<=3'b1;
				else nexstate<=3'b2;
			3'b2:
				if(inp)nexstate<=3'b0;
				else nexstate<=3'b0;
			3'b3:
				if(inp)nexstate<=3'b4;
				else nexstate<=3'b2;
			3'b4:
				if(inp)nexstate<=3'b1;
				else nexstate<=3'b2;
			endcase
	 end
	 
	 always@(state) //output logic
	 begin
		if(state==3'b4)outp<=1'b1;
		else outp<=1'b0;	
	 end


endmodule

testbench similar to mealey